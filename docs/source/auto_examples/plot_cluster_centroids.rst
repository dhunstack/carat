.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_cluster_centroids.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cluster_centroids.py:


======================
Plot cluster centroids
======================

This example shows how to plot centroids of the clusters of rhythmic patterns.


.. code-block:: default


    # Code source: Mart√≠n Rocamora
    # License: MIT







Imports
  - matplotlib for visualization



.. code-block:: default

    from __future__ import print_function
    import matplotlib.pyplot as plt
    import carat







We group rhythmic patterns into clusters and plot their centroids.

First, we'll load one of the audio files included in `carat`.


.. code-block:: default

    audio_path = carat.util.example_audio_file(num_file=1)

    y, sr = carat.audio.load(audio_path, sr=None)







Next, we'll load the annotations provided for the example audio file.


.. code-block:: default

    annotations_path = carat.util.example_beats_file(num_file=1)

    beats, beat_labs = carat.annotations.load_beats(annotations_path)
    downbeats, downbeat_labs = carat.annotations.load_downbeats(annotations_path)







Then, we'll compute the accentuation feature.

**Note:** This example is tailored towards the rhythmic patterns of the lowest
sounding of the three drum types taking part in the recording, so the analysis
focuses on the low frequencies (20 to 200 Hz).


.. code-block:: default

    acce, times, _ = carat.features.accentuation_feature(y, sr, minfreq=20, maxfreq=200)







Next, we'll compute the feature map.


.. code-block:: default

    n_beats = int(round(beats.size/downbeats.size))
    n_tatums = 4

    map_acce, _, _, _ = carat.features.feature_map(acce, times, beats, downbeats, n_beats=n_beats,
                                                   n_tatums=n_tatums)







Then, we'll group rhythmic patterns into clusters. This is done using the classical
K-means method with Euclidean distance (but other clustering methods and distance
measures can be used too).

**Note:** The number of clusters n_clusters has to be specified as an input parameter.


.. code-block:: default

    n_clusters = 4

    cluster_labs, centroids, _ = carat.clustering.rhythmic_patterns(map_acce, n_clusters=n_clusters)







Finally we plot the centroids of the clusters of rhythmic patterns.


.. code-block:: default


    fig = plt.figure(figsize=(8, 8))
    carat.display.centroids_plot(centroids, n_tatums=n_tatums)

    plt.tight_layout()

    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_cluster_centroids_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.5/dist-packages/matplotlib/figure.py:445: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      % get_backend())




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.359 seconds)


.. _sphx_glr_download_auto_examples_plot_cluster_centroids.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_cluster_centroids.py <plot_cluster_centroids.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_cluster_centroids.ipynb <plot_cluster_centroids.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
